name: Build and Push Docker Images to ECR

on:
  push:
    branches:
      - master  # Adjust if you want to trigger on a different branch

env:
# Registry/Repository As Required
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: githubdso/testapp 
  AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  id-token: write   # Allows the workflow to request an OIDC token for AWS role assumption
  contents: read    # Allows read access to the repository contents

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials using STS (assume role via OIDC)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::049789986873:role/github-devsecops
          aws-region: us-east-1

      ###########################################
      # SCA/ Dependency Checking with NPM Audit
      ###########################################

      # Basic Node Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # NPM Setup
      - name: Install dependencies
        working-directory: bank_app/site
        run: npm install

      # NPM Audit and saving file as JSON Report
      - name: Run npm audit and output JSON
        working-directory: bank_app/site
        run: npm audit --json > audit.json || true

      # Report Upload as Github Artifact -- Available in Workflow Summary to Download
      - name: Upload audit report artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: bank_app/site/audit.json

      # Upload report to DefectDojo - test
      - name: Upload NPM Audit Scan Report to DefectDojo
        run: |
          ENGAGEMENT_ID=1
          SCAN_TYPE="NPM Audit v7+ Scan"
          ENCODED_SCAN_TYPE=$(echo "NPM Audit v7+ Scan" | jq -sRr @uri)
          
          # Check if a test already exists
          TEST_COUNT=$(curl -s -X GET "$DEFECTDOJO_URL/tests/?engagement=$ENGAGEMENT_ID&scan_type=$ENCODED_SCAN_TYPE" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" | jq '.count')

          echo "Parsed TEST_COUNT: '$TEST_COUNT'"

          if [ "$TEST_COUNT" -gt 0 ]; then
            echo "Existing scan found, reimporting..."
            ENDPOINT="reimport-scan"
          else
            echo "No existing scan, performing first-time import..."
            ENDPOINT="import-scan"
          fi

          curl -k -X POST "$DEFECTDOJO_URL/$ENDPOINT/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "Content-Type: multipart/form-data" \
          -F "scan_type=$SCAN_TYPE" \
          -F "product_name=Product1" \
          -F "file=@bank_app/site/audit.json" \
          -F "engagement_name=Continuous Testing" \
          -F "close_old_findings=true" \
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}

      ###########################################
      # SAST with Opengrep
      ###########################################

      # Downloading Opengrep
      # TO DO: Change static release to pull release list and get from env latest release of opengrep
      - name: Install OpenGrep
        working-directory: bank_app/site
        run: wget https://github.com/opengrep/opengrep/releases/download/v1.0.0-alpha.14/opengrep_manylinux_x86 

      # Making Runtime Binary Executable
      - name: Permission Setup OpenGrep
        working-directory: bank_app/site
        run: chmod +x ./opengrep_manylinux_x86

      # Executing Binary Against Code Base with Default Rules
      - name: Run opengrep
        working-directory: bank_app/site
        run: ./opengrep_manylinux_x86 scan . --metrics=on --exclude node_modules --json | tee opengrep.json

      # Report Upload as Github Artifact -- Available in Workflow Summary to Download
      - name: Upload audit report artifact
        uses: actions/upload-artifact@v4
        with:
          name: opengrep-report
          path: bank_app/site/opengrep.json

      # Upload report to DefectDojo
      - name: Upload OpenGrep Scan Report to DefectDojo
        run: |
          ENGAGEMENT_ID=1
          SCAN_TYPE="Semgrep JSON Report"
          ENCODED_SCAN_TYPE=$(echo "Semgrep JSON Report" | jq -sRr @uri)
          
          # Check if a test already exists
          TEST_COUNT=$(curl -s -X GET "$DEFECTDOJO_URL/tests/?engagement=$ENGAGEMENT_ID&scan_type=$ENCODED_SCAN_TYPE" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" | jq '.count')

          echo "Parsed TEST_COUNT: '$TEST_COUNT'"

          if [ "$TEST_COUNT" -gt 0 ]; then
            echo "Existing scan found, reimporting..."
            ENDPOINT="reimport-scan"
          else
            echo "No existing scan, performing first-time import..."
            ENDPOINT="import-scan"
          fi

          curl -k -X POST "$DEFECTDOJO_URL/$ENDPOINT/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "Content-Type: multipart/form-data" \
          -F "scan_type=$SCAN_TYPE" \
          -F "product_name=Product1" \
          -F "file=@bank_app/site/opengrep.json" \
          -F "engagement_name=Continuous Testing" \
          -F "close_old_findings=true" \
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
      
      ###########################################
      # Provisioning the Image
      ###########################################

      # Building and Tagging Application Image
      - name: Build and Push bank_app Image
        run: |
          echo "Building bank_app image from bank_app/Dockerfile..."
          docker build -t testapp:app-latest bank_app
          echo "Tagging bank_app image..."
          docker tag testapp:app-latest $ECR_REGISTRY/$ECR_REPOSITORY:app-latest

      # - name: Check if bank_db Image Exists in ECR
      #   id: check_bank_db
      #   run: |
      #     echo "Checking if bank_db image exists in ECR..."
      #     if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=db-latest; then
      #       echo "bank_db image exists. Skipping build."
      #       echo "exists=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "bank_db image does not exist. Will build image."
      #       echo "exists=false" >> $GITHUB_OUTPUT
      #     fi
      # Build and tag bank_db only if it doesn't exist
      - name: Build and Tag bank_db Image
        # if: steps.check_bank_db.outputs.exists == 'false'
        run: |
          echo "Building bank_db image from bank_db/Dockerfile..."
          docker build -t testapp:db-latest bank_db
          echo "Tagging bank_db image..."
          docker tag testapp:db-latest $ECR_REGISTRY/$ECR_REPOSITORY:db-latest


      # # If bank_db already exists, pull it so we can scan it locally
      # - name: Pull Existing bank_db Image for Scanning
      #   if: steps.check_bank_db.outputs.exists == 'true'
      #   run: |
      #     echo "Pulling existing bank_db image from ECR for scanning..."
      #     docker pull $ECR_REGISTRY/$ECR_REPOSITORY:db-latest
      
      ###########################################
      # Scan images with Aqua Security Trivy
      ###########################################

      - name: Scan bank_app Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:app-latest"
          format: 'json'
          output: 'trivy-app.json'

      - name: Upload Trivy App container scan results to output
        uses: actions/upload-artifact@v4
        with:
          name: trivy-app-report
          path: ./trivy-app.json

      - name: Scan bank_db Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:db-latest"
          format: 'json'
          output: 'trivy-db.json'

      - name: Upload Trivy DB container scan results to output
        uses: actions/upload-artifact@v4
        with:
          name: trivy-db-report
          path: ./trivy-db.json

      # Upload Trivy Scan Reports Separately for App & DB
      - name: Upload Trivy Scan Reports Separately
        run: |
          ENGAGEMENT_ID=1
          APP_SCAN_TYPE="Trivy Scan - App"
          DB_SCAN_TYPE="Trivy Scan - DB"
          ENCODED_APP_SCAN_TYPE=$(echo "Trivy Scan - App" | jq -sRr @uri)
          ENCODED_DB_SCAN_TYPE=$(echo "Trivy Scan - DB" | jq -sRr @uri)
          
          # Check if App container test exists
          APP_TEST_COUNT=$(curl -s -X GET "$DEFECTDOJO_URL/tests/?engagement=$ENGAGEMENT_ID&scan_type=$ENCODED_APP_SCAN_TYPE" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" | jq '.count')

          # Check if DB container test exists
          DB_TEST_COUNT=$(curl -s -X GET "$DEFECTDOJO_URL/tests/?engagement=$ENGAGEMENT_ID&scan_type=$ENCODED_DB_SCAN_TYPE" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" | jq '.count')

          echo "App TEST_COUNT: '$APP_TEST_COUNT'"
          echo "DB TEST_COUNT: '$DB_TEST_COUNT'"

          if [ "$APP_TEST_COUNT" -gt 0 ]; then
            APP_ENDPOINT="reimport-scan"
          else
            APP_ENDPOINT="import-scan"
          fi

          if [ "$DB_TEST_COUNT" -gt 0 ]; then
            DB_ENDPOINT="reimport-scan"
          else
            DB_ENDPOINT="import-scan"
          fi

          # Upload app container scan result under "Trivy Scan - App"
          curl -k -X POST "$DEFECTDOJO_URL/$APP_ENDPOINT/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "Content-Type: multipart/form-data" \
          -F "scan_type=$APP_SCAN_TYPE" \
          -F "product_name=Product1" \
          -F "file=@trivy_app_scan.json" \
          -F "engagement_name=Continuous Testing" \
          -F "close_old_findings=true"

          # Upload DB container scan result under "Trivy Scan - DB"
          curl -k -X POST "$DEFECTDOJO_URL/$DB_ENDPOINT/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "Content-Type: multipart/form-data" \
          -F "scan_type=$DB_SCAN_TYPE" \
          -F "product_name=Product1" \
          -F "file=@trivy_db_scan.json" \
          -F "engagement_name=Continuous Testing" \
          -F "close_old_findings=true"

        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
    