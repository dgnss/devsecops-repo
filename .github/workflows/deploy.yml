name: Build and Push Docker Images to ECR

on:
  push:
    branches:
      - master  # Adjust if you want to trigger on a different branch

permissions:
  id-token: write   # Allows the workflow to request an OIDC token for AWS role assumption
  contents: read    # Allows read access to the repository contents

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials using STS (assume role via OIDC)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::049789986873:role/github-devsecops
          aws-region: us-east-1

      ###########################################
      # SCA/ Dependency Checking with NPM Audit
      ###########################################

      # Basic Node Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # NPM Setup
      - name: Install dependencies
        working-directory: bank_app/site
        run: npm install

      # NPM Audit and saving file as JSON Report
      - name: Run npm audit and output JSON
        working-directory: bank_app/site
        run: npm audit --json > audit.json || true

      # Report Upload as Github Artifact -- Available in Workflow Summary to Download
      - name: Upload audit report artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: bank_app/site/audit.json

      # Upload report to DefectDojo - test
      - name: Upload NPM Audit Scan Report to DefectDojo
        run: |
          ENGAGEMENT_ID=1
          SCAN_TYPE="NPM Audit v7+ Scan"
          ENCODED_SCAN_TYPE=$(echo "NPM Audit v7+ Scan" | jq -sRr @uri)
          
          # Check if a test already exists
          TEST_COUNT=$(curl -s -X GET "$DEFECTDOJO_URL/tests/?engagement=$ENGAGEMENT_ID&scan_type=$ENCODED_SCAN_TYPE" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" | jq '.count')

          echo "Parsed TEST_COUNT: '$TEST_COUNT'"

          if [ "$TEST_COUNT" -gt 0 ]; then
            echo "Existing scan found, reimporting..."
            ENDPOINT="reimport-scan"
          else
            echo "No existing scan, performing first-time import..."
            ENDPOINT="import-scan"
          fi

          curl -k -X POST "$DEFECTDOJO_URL/$ENDPOINT/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "Content-Type: multipart/form-data" \
          -F "scan_type=$SCAN_TYPE" \
          -F "product_name=Product11" \
          -F "file=@bank_app/site/audit.json" \
          -F "engagement_name=Continuous Testing" \
          -F "close_old_findings=true" \
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}

      ###########################################
      # SAST with Opengrep
      ###########################################

      # Downloading Opengrep
      # TO DO: Change static release to pull release list and get from env latest release of opengrep
      - name: Install OpenGrep
        working-directory: bank_app/site
        run: wget https://github.com/opengrep/opengrep/releases/download/v1.0.0-alpha.14/opengrep_manylinux_x86 

      # Making Runtime Binary Executable
      - name: Permission Setup OpenGrep
        working-directory: bank_app/site
        run: chmod +x ./opengrep_manylinux_x86

      # Executing Binary Against Code Base with Default Rules
      - name: Run opengrep
        working-directory: bank_app/site
        run: ./opengrep_manylinux_x86 scan . --metrics=on --exclude node_modules --json | tee opengrep.json

      # Report Upload as Github Artifact -- Available in Workflow Summary to Download
      - name: Upload audit report artifact
        uses: actions/upload-artifact@v4
        with:
          name: opengrep-report
          path: bank_app/site/opengrep.json

      # Upload report to DefectDojo
      - name: Upload OpenGrep Scan Report to DefectDojo
        run: |
          ENGAGEMENT_ID=1
          SCAN_TYPE="Semgrep JSON Report"
          ENCODED_SCAN_TYPE=$(echo "Semgrep JSON Report" | jq -sRr @uri)
          
          # Check if a test already exists
          TEST_COUNT=$(curl -s -X GET "$DEFECTDOJO_URL/tests/?engagement=$ENGAGEMENT_ID&scan_type=$ENCODED_SCAN_TYPE" \
            -H "Authorization: Token $DEFECTDOJO_API_KEY" | jq '.count')

          echo "Parsed TEST_COUNT: '$TEST_COUNT'"

          if [ "$TEST_COUNT" -gt 0 ]; then
            echo "Existing scan found, reimporting..."
            ENDPOINT="reimport-scan"
          else
            echo "No existing scan, performing first-time import..."
            ENDPOINT="import-scan"
          fi

          curl -k -X POST "$DEFECTDOJO_URL/$ENDPOINT/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "Content-Type: multipart/form-data" \
          -F "scan_type=$SCAN_TYPE" \
          -F "product_name=Product1" \
          -F "file=@bank_app/site/opengrep.json" \
          -F "engagement_name=Continuous Testing" \
          -F "close_old_findings=true" \
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}