name: Build and Push Docker Images to ECR

on:
  push:
    branches:
      - master  # Adjust if you want to trigger on a different branch

permissions:
  id-token: write   # Allows the workflow to request an OIDC token for AWS role assumption
  contents: read    # Allows read access to the repository contents

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials using STS (assume role via OIDC)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::049789986873:role/github-devsecops
          aws-region: us-east-1

      # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # # - name: Register Task Definition
      # #   run: |
      # #     aws ecs register-task-definition --cli-input-json file://.github/workflows/defectdojo-task-def.json

      # - name: Deploy DefectDojo Service
      #   run: |
      #     aws ecs create-service \
      #       --cluster defectdojo-cluster \
      #       --service-name defectdojo-service \
      #       --task-definition defectdojo-task:3 \
      #       --desired-count 1 \
      #       --launch-type FARGATE \
      #       --network-configuration "awsvpcConfiguration={subnets=[subnet-090dc98e525d9165a],securityGroups=[sg-0a6a475d4bec5d17a],assignPublicIp=ENABLED}"
      
      # # - name: Get DefectDojo Public IP
      # #   run: |
      # #     TASK_ARN=$(aws ecs list-tasks --cluster defectdojo-cluster --service defectdojo-service --query "taskArns[0]" --output text)
      # #     ENI_ID=$(aws ecs describe-tasks --cluster defectdojo-cluster --tasks $TASK_ARN --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
      # #     PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query "NetworkInterfaces[0].Association.PublicIp" --output text)
      # #     echo "DEFECTDOJO_URL=http://$PUBLIC_IP:8080" >> $GITHUB_ENV

      # 游릭 Check if Task Definition Already Exists
      - name: Check if Task Definition Exists
        id: check_task_def
        run: |
          TASK_FAMILY="defectdojo-task"
          LATEST_REVISION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY --query 'taskDefinition.revision' --output text 2>/dev/null || echo "NONE")

          if [ "$LATEST_REVISION" != "NONE" ]; then
            echo "TASK_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TASK_EXISTS=false" >> $GITHUB_ENV
          fi

      # 游릭 Retrieve Existing Task Definition JSON
      - name: Get Current Task Definition JSON
        if: env.TASK_EXISTS == 'true'
        run: |
          aws ecs describe-task-definition --task-definition defectdojo-task --query 'taskDefinition' > current-task-def.json
          jq 'del(.taskDefinitionArn, .status, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' current-task-def.json > cleaned-task-def.json

      # 游릭 Compare Current vs New Task Definition
      - name: Compare Task Definitions
        if: env.TASK_EXISTS == 'true'
        id: compare_task_def
        run: |
          NEW_TASK_DEF="defectdojo-task-def.json"
          if cmp -s cleaned-task-def.json $NEW_TASK_DEF; then
            echo "TASK_NEEDS_UPDATE=false" >> $GITHUB_ENV
          else
            echo "TASK_NEEDS_UPDATE=true" >> $GITHUB_ENV
          fi

      # 游릭 Register Task Definition Only If It Has Changed
      - name: Register New Task Definition
        if: env.TASK_NEEDS_UPDATE == 'true' || env.TASK_EXISTS == 'false'
        run: |
          aws ecs register-task-definition --cli-input-json file://.github/workflows/defectdojo-task-def.json

      # 游릭 Get Latest Task Definition ARN
      - name: Get Latest Task Definition ARN
        id: task_def_arn
        run: |
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition defectdojo-task --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      # 游릭 Check if ECS Service Exists
      - name: Check if ECS Service Exists
        id: check_service
        run: |
          SERVICE_NAME="defectdojo-service"
          CLUSTER_NAME="defectdojo-cluster"

          EXISTS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].serviceName' --output text 2>/dev/null || echo "NONE")

          if [ "$EXISTS" != "NONE" ]; then
            echo "ECS_SERVICE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "ECS_SERVICE_EXISTS=false" >> $GITHUB_ENV
          fi

      # 游릭 Create ECS Service If It Doesn't Exist
      - name: Create ECS Service
        if: env.ECS_SERVICE_EXISTS == 'false'
        run: |
          aws ecs create-service \
            --cluster defectdojo-cluster \
            --service-name defectdojo-service \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-090dc98e525d9165a],securityGroups=[sg-0a6a475d4bec5d17a],assignPublicIp=ENABLED}"

      # 游릭 Wait for ECS Service to Become Active
      - name: Wait for ECS Service to Become Active
        if: env.ECS_SERVICE_EXISTS == 'true'
        run: |
          SERVICE_NAME="defectdojo-service"
          CLUSTER_NAME="defectdojo-cluster"

          echo "Checking if ECS service is ACTIVE..."
          STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text)

          while [ "$STATUS" != "ACTIVE" ]; do
            echo "Service is not ACTIVE yet (Current status: $STATUS)... Waiting 10s"
            sleep 10
            STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text)
          done

          echo "ECS service is now ACTIVE!"
      
      # 游릭 Update ECS Service If Exists
      - name: Update ECS Service
        if: env.ECS_SERVICE_EXISTS == 'true'
        run: |
          aws ecs update-service \
            --cluster defectdojo-cluster \
            --service defectdojo-service \
            --task-definition $TASK_DEF_ARN

      # # 游릭 Create ECS Service If It Doesn't Exist
      # - name: Create ECS Service
      #   if: env.ECS_SERVICE_EXISTS == 'false'
      #   run: |
      #     aws ecs create-service \
      #       --cluster defectdojo-cluster \
      #       --service-name defectdojo-service \
      #       --task-definition $TASK_DEF_ARN \
      #       --desired-count 1 \
      #       --launch-type FARGATE \
      #       --network-configuration "awsvpcConfiguration={subnets=[subnet-090dc98e525d9165a],securityGroups=[sg-0a6a475d4bec5d17a],assignPublicIp=ENABLED}"

#Made changes to github-devsecops-policy 5